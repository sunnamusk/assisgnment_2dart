void main() {
  // List of item prices
  List<double> itemPrices = [25.0, 15.0, 50.0, 7.0, 12.0];

  // Step 1: Filter out items below a certain threshold (e.g., $10) using an anonymous function
  var filteredPrices = itemPrices.where((price) => price >= 10).toList();
  print("Filtered Prices (above \$10): $filteredPrices");

  // Step 2: Apply discount function to reduce the price by a percentage
  double discountPercent = 10.0; // 10% discount
  List<double> discountedPrices = applyDiscount(filteredPrices, (price) => price * (1 - discountPercent / 100));
  print("Prices after discount: $discountedPrices");

  // Step 3: Calculate total after tax (optional parameter)
  double taxPercent = 5.0; // 5% tax
  double totalPrice = calculateTotal(discountedPrices, taxPercent: taxPercent);
  print("Total Price after tax: \$${totalPrice.toStringAsFixed(2)}");

  // Step 4: Apply additional special discount based on the factorial of the number of items in the cart
  int numberOfItems = discountedPrices.length;
  double factorialDiscountPercent = calculateFactorialDiscount(numberOfItems);
  double finalPrice = totalPrice * (1 - factorialDiscountPercent / 100);
  print("Final Price after special factorial discount: \$${finalPrice.toStringAsFixed(2)}");
}

// Function to calculate the total price, with an optional parameter for tax
double calculateTotal(List<double> prices, {double taxPercent = 0}) {
  double total = prices.fold(0, (sum, price) => sum + price);
  total += total * (taxPercent / 100); // Apply tax
  return total;
}

// Higher-order function to apply a discount to all items in the list
List<double> applyDiscount(List<double> prices, double Function(double) discountFunction) {
  return prices.map(discountFunction).toList();
}

// Recursive function to calculate factorial (for special discount)
double calculateFactorialDiscount(int n) {
  if (n <= 1) {
    return 1.0; // Base case: 1! = 1
  } else {
    return n * calculateFactorialDiscount(n - 1);
  }
}
